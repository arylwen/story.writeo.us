/* Generated By:JavaCC: Do not edit this line. ParserTreeConstants.java Version 4.2 */
package us.terebi.lang.lpc.parser.ast;

import us.terebi.lang.lpc.parser.jj.*;

public interface ParserTreeConstants
{
  public int JJTOBJECTDEFINITION = 0;
  public int JJTINHERIT = 1;
  public int JJTDECLARATION = 2;
  public int JJTARRAYSTAR = 3;
  public int JJTFIELDS = 4;
  public int JJTVARIABLE = 5;
  public int JJTVARIABLEASSIGNMENT = 6;
  public int JJTMETHOD = 7;
  public int JJTVOID = 8;
  public int JJTMODIFIERS = 9;
  public int JJTTYPE = 10;
  public int JJTIDENTIFIER = 11;
  public int JJTPARAMETERDECLARATIONS = 12;
  public int JJTPARAMETERDECLARATION = 13;
  public int JJTREF = 14;
  public int JJTFULLTYPE = 15;
  public int JJTCLASSBODY = 16;
  public int JJTSTATEMENTBLOCK = 17;
  public int JJTNOOPSTATEMENT = 18;
  public int JJTEXPRESSIONSTATEMENT = 19;
  public int JJTLABEL = 20;
  public int JJTCONDITIONALSTATEMENT = 21;
  public int JJTLOOPSTATEMENT = 22;
  public int JJTOPTVARIABLEOREXPRESSION = 23;
  public int JJTOPTEXPRESSION = 24;
  public int JJTCONTROLSTATEMENT = 25;
  public int JJTVARIABLEDECLARATION = 26;
  public int JJTCOMPOUNDEXPRESSION = 27;
  public int JJTASSIGNMENTEXPRESSION = 28;
  public int JJTASSIGNMENTOPERATOR = 29;
  public int JJTTERNARYEXPRESSION = 30;
  public int JJTLOGICALOREXPRESSION = 31;
  public int JJTLOGICALANDEXPRESSION = 32;
  public int JJTBINARYOREXPRESSION = 33;
  public int JJTEXCLUSIVEOREXPRESSION = 34;
  public int JJTBINARYANDEXPRESSION = 35;
  public int JJTCOMPARISONEXPRESSION = 36;
  public int JJTCOMPARISONOPERATOR = 37;
  public int JJTARITHMETICEXPRESSION = 38;
  public int JJTARITHMETICOPERATOR = 39;
  public int JJTCASTEXPRESSION = 40;
  public int JJTUNARYEXPRESSION = 41;
  public int JJTUNARYOPERATOR = 42;
  public int JJTPREFIXINCREMENTOPERATOR = 43;
  public int JJTPOSTFIXINCREMENTOPERATOR = 44;
  public int JJTPOSTFIXEXPRESSION = 45;
  public int JJTCALLOTHER = 46;
  public int JJTFUNCTIONCALL = 47;
  public int JJTVARIABLEREFERENCE = 48;
  public int JJTIMMEDIATEEXPRESSION = 49;
  public int JJTSCOPEDIDENTIFIER = 50;
  public int JJTSCOPERESOLUTION = 51;
  public int JJTEXPRESSIONCALL = 52;
  public int JJTCATCH = 53;
  public int JJTINDEXPOSTFIX = 54;
  public int JJTRANGE = 55;
  public int JJTINDEXEXPRESSION = 56;
  public int JJTREVERSEINDEX = 57;
  public int JJTFUNCTIONARGUMENTS = 58;
  public int JJTARGUMENTEXPRESSION = 59;
  public int JJTLITERALVALUE = 60;
  public int JJTCONSTANT = 61;
  public int JJTARRAYLITERAL = 62;
  public int JJTARRAYELEMENT = 63;
  public int JJTELEMENTEXPANDER = 64;
  public int JJTMAPPINGLITERAL = 65;
  public int JJTMAPPINGELEMENT = 66;
  public int JJTFUNCTIONLITERAL = 67;
  public int JJTCLASSLITERAL = 68;
  public int JJTCLASSELEMENT = 69;


  public String[] jjtNodeName = {
    "ObjectDefinition",
    "Inherit",
    "Declaration",
    "ArrayStar",
    "Fields",
    "Variable",
    "VariableAssignment",
    "Method",
    "void",
    "Modifiers",
    "Type",
    "Identifier",
    "ParameterDeclarations",
    "ParameterDeclaration",
    "Ref",
    "FullType",
    "ClassBody",
    "StatementBlock",
    "NoOpStatement",
    "ExpressionStatement",
    "Label",
    "ConditionalStatement",
    "LoopStatement",
    "OptVariableOrExpression",
    "OptExpression",
    "ControlStatement",
    "VariableDeclaration",
    "CompoundExpression",
    "AssignmentExpression",
    "AssignmentOperator",
    "TernaryExpression",
    "LogicalOrExpression",
    "LogicalAndExpression",
    "BinaryOrExpression",
    "ExclusiveOrExpression",
    "BinaryAndExpression",
    "ComparisonExpression",
    "ComparisonOperator",
    "ArithmeticExpression",
    "ArithmeticOperator",
    "CastExpression",
    "UnaryExpression",
    "UnaryOperator",
    "PrefixIncrementOperator",
    "PostfixIncrementOperator",
    "PostfixExpression",
    "CallOther",
    "FunctionCall",
    "VariableReference",
    "ImmediateExpression",
    "ScopedIdentifier",
    "ScopeResolution",
    "ExpressionCall",
    "Catch",
    "IndexPostfix",
    "Range",
    "IndexExpression",
    "ReverseIndex",
    "FunctionArguments",
    "ArgumentExpression",
    "LiteralValue",
    "Constant",
    "ArrayLiteral",
    "ArrayElement",
    "ElementExpander",
    "MappingLiteral",
    "MappingElement",
    "FunctionLiteral",
    "ClassLiteral",
    "ClassElement",
  };
}
/* JavaCC - OriginalChecksum=8305a2ea0db919e20281ba233634e21a (do not edit this line) */
