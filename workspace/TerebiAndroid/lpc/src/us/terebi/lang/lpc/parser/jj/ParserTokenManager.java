/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package us.terebi.lang.lpc.parser.jj ;
import us.terebi.lang.lpc.parser.ast.*;
import java.util.*;
import java.io.*;
import us.terebi.lang.lpc.parser.*;
import us.terebi.lang.lpc.parser.util.ASTUtil;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1080000000L) != 0L)
            return 22;
         if ((active1 & 0x80000000000L) != 0L)
            return 69;
         if ((active0 & 0xffffffffc000000L) != 0L)
         {
            jjmatchedKind = 108;
            return 70;
         }
         return -1;
      case 1:
         if ((active0 & 0x400800124000000L) != 0L)
            return 70;
         if ((active0 & 0xbff7ffed8000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 1;
            }
            return 70;
         }
         return -1;
      case 2:
         if ((active0 & 0x2008000c0000000L) != 0L)
            return 70;
         if ((active0 & 0xdff7ffe18000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 2;
            }
            return 70;
         }
         return -1;
      case 3:
         if ((active0 & 0x100001008000000L) != 0L)
            return 70;
         if ((active0 & 0xcff7fee90000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
            return 70;
         }
         return -1;
      case 4:
         if ((active0 & 0x891008410000000L) != 0L)
            return 70;
         if ((active0 & 0x46e7f6a80000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
            return 70;
         }
         return -1;
      case 5:
         if ((active0 & 0x46334800000000L) != 0L)
            return 70;
         if ((active0 & 0x4284c2280000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
            return 70;
         }
         return -1;
      case 6:
         if ((active0 & 0x408482080000000L) != 0L)
            return 70;
         if ((active0 & 0x20040200000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
            return 70;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000200000000L) != 0L)
            return 70;
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 7;
            return 70;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 36:
         return jjStartNfaWithStates_0(0, 107, 69);
      case 37:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 38:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1040000L);
      case 40:
         return jjStopAtPos(0, 64);
      case 41:
         return jjStopAtPos(0, 65);
      case 42:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 43:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x204000000L);
      case 44:
         return jjStopAtPos(0, 62);
      case 45:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x408000200L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180L);
      case 47:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 58:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 60);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x28000004000L);
      case 61:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 62:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x50000008000L);
      case 63:
         return jjStopAtPos(0, 74);
      case 91:
         return jjStopAtPos(0, 68);
      case 93:
         return jjStopAtPos(0, 69);
      case 94:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000400000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800009200000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2020000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x210000c0000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400800104000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x88000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xe0000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200004000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2010800000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100400000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 66);
      case 124:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2080000L);
      case 125:
         return jjStopAtPos(0, 67);
      case 126:
         return jjStopAtPos(0, 87);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 43:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 45:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 46:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 58:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 60:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L);
      case 61:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      case 62:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8409000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200006000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 70);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x801000008000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400800000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 70);
         return jjMoveStringLiteralDfa2_0(active0, 0x1003002c0000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100c0400000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x60020000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 124:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(2, 72);
         break;
      case 61:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 106);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800010000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 70);
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100080810000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000200000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x12400080000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x101008000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 70);
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x11702400000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20008000000000L);
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 70);
         break;
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 70);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 70);
         return jjMoveStringLiteralDfa4_0(active0, 0x484000080000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x20010000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x50a00000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80080000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000800000000L);
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 70);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 70);
         return jjMoveStringLiteralDfa5_0(active0, 0x40040000000000L);
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 70);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8030200000000L);
      case 107:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 70);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x400404000000000L);
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 70);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 70);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 70);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 70);
         return jjMoveStringLiteralDfa6_0(active0, 0x40080000000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 70);
         break;
      case 103:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 70);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 104:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 70);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x420000000000000L);
      case 107:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 70);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 70);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000200000000L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 70);
         break;
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 70);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 70);
         break;
      case 103:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 70);
         break;
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 70);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 70);
         break;
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 70);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 70);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 70);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 69;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(28, 29);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(68);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     jjCheckNAdd(67);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddStates(3, 7);
                  }
                  else if (curChar == 36)
                     jjCheckNAddTwoStates(67, 68);
                  else if (curChar == 35)
                     jjCheckNAddStates(8, 11);
                  else if (curChar == 47)
                     jjAddStates(12, 13);
                  else if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  else if (curChar == 39)
                     jjAddStates(17, 18);
                  if (curChar == 48)
                     jjAddStates(19, 20);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(65);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     jjCheckNAdd(64);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 39)
                     jjAddStates(17, 18);
                  break;
               case 4:
                  if ((0xffffffffffffcfffL & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 22)
                     kind = 22;
                  break;
               case 7:
                  if ((0xff00ffffffffffffL & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 5);
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 10:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  break;
               case 13:
                  if ((0xfffffffbffffcfffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 15:
                  if ((0xff00ffffffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 16:
                  if (curChar == 34 && kind > 23)
                     kind = 23;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 47)
                     jjAddStates(12, 13);
                  break;
               case 23:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 24:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 25:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 26:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 42)
                     jjCheckNAddStates(25, 27);
                  break;
               case 30:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 32:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 33:
                  if (curChar == 35)
                     jjCheckNAddStates(8, 11);
                  break;
               case 34:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(34, 38);
                  break;
               case 39:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(39, 45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(3, 7);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if (curChar == 48)
                     jjAddStates(19, 20);
                  break;
               case 60:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(65);
                  break;
               case 66:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(68);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(65);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     jjCheckNAdd(64);
                  }
                  break;
               case 1:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 92)
                     jjAddStates(28, 30);
                  break;
               case 7:
                  jjCheckNAdd(5);
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(31, 33);
                  break;
               case 15:
                  jjCheckNAddStates(14, 16);
                  break;
               case 23:
                  jjAddStates(0, 2);
                  break;
               case 28:
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
               case 31:
                  jjCheckNAddTwoStates(31, 29);
                  break;
               case 35:
                  if (curChar == 101 && kind > 7)
                     kind = 7;
                  break;
               case 36:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 97 && kind > 10)
                     kind = 10;
                  break;
               case 41:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 51:
                  if (curChar == 101)
                     jjAddStates(34, 35);
                  break;
               case 55:
                  if (curChar == 101)
                     jjAddStates(36, 37);
                  break;
               case 59:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 61:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(65);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(5);
                  break;
               case 13:
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(14, 16);
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(31, 29);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 69 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  kind = 11;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 11;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 12);
      case 92:
         return jjMoveStringLiteralDfa1_1(0x6000L);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(2, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(38, 40);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xfffffffbffffcfffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 4:
                  if ((0xff00ffffffffffffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 5:
                  if (curChar == 34 && kind > 9)
                     kind = 9;
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 8:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 4:
                  jjCheckNAddStates(38, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(38, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   23, 24, 26, 47, 48, 49, 54, 55, 34, 38, 39, 45, 22, 27, 13, 14, 
   16, 4, 6, 59, 61, 13, 14, 18, 16, 29, 30, 32, 7, 8, 10, 15, 
   17, 19, 52, 53, 56, 57, 2, 3, 5, 2, 3, 7, 5, 4, 6, 8, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\151\146", "\145\154\163\145", "\167\150\151\154\145", "\144\157", "\146\157\162", 
"\146\157\162\145\141\143\150", "\151\156", "\143\157\156\164\151\156\165\145", "\142\162\145\141\153", 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", 
"\162\145\164\165\162\156", "\143\141\164\143\150", "\163\164\141\164\151\143", 
"\160\165\142\154\151\143", "\160\162\157\164\145\143\164\145\144", "\160\162\151\166\141\164\145", 
"\156\157\163\141\166\145", "\156\157\155\141\163\153", "\166\141\162\141\162\147\163", "\151\156\164", 
"\146\154\157\141\164", "\163\164\162\151\156\147", "\157\142\152\145\143\164", 
"\155\141\160\160\151\156\147", "\141\162\162\141\171", "\146\165\156\143\164\151\157\156", 
"\142\165\146\146\145\162", "\155\151\170\145\144", "\166\157\151\144", "\162\145\146", 
"\151\156\150\145\162\151\164", "\143\154\141\163\163", "\73", "\72", "\54", "\72\72", "\50", "\51", "\173", 
"\175", "\133", "\135", "\75", "\56\56", "\56\56\56", "\55\76", "\77", "\41", 
"\75\75", "\41\75", "\74\75", "\76\75", "\74", "\76", "\46\46", "\174\174", "\46", 
"\174", "\136", "\176", "\46\75", "\174\75", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\45", "\53\75", "\55\75", "\52\75", "\57\75", "\136\75", "\45\75", "\74\74", 
"\76\76", "\74\74\75", "\76\76\75", "\44", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "LINE_DIRECTIVE",
   "PRAGMA_DIRECTIVE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 2, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffcdf0001L, 0x7fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1ffeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xf00L, 0x0L, 
};
static final long[] jjtoMore = {
   0xe000L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[69];
private final int[] jjstateSet = new int[138];
private final StringBuffer jjimage = new StringBuffer();
private StringBuffer image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 69; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 8 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        ParserState.getState().getLineMapping().mapLine( matchedToken.beginLine, Integer.parseInt(image.toString().trim())-1);
         break;
      case 9 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        ParserState.getState().getLineMapping().mapFile( matchedToken.beginLine, image.toString().trim() );
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
